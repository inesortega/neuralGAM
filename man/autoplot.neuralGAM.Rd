% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoplot.neuralGAM.R
\name{autoplot.neuralGAM}
\alias{autoplot.neuralGAM}
\title{Autoplot method for \code{neuralGAM} objects. Produces a single plot.}
\usage{
\method{autoplot}{neuralGAM}(
  object,
  newdata = NULL,
  which = c("response", "link", "terms"),
  interval = c("none", "confidence", "prediction", "both"),
  level = 0.95,
  term = NULL,
  rug = TRUE,
  ...
)
}
\arguments{
\item{object}{A fitted \code{neuralGAM} object.}

\item{newdata}{Optional \code{data.frame}/list of covariates to evaluate.
If omitted, the training data stored in the model are used.}

\item{which}{One of \code{c("response","link","terms")}. Default \code{"response"}.}

\item{interval}{One of \code{c("none","confidence","prediction","both")}.
Default \code{"confidence"}.
\itemize{
\item Confidence intervals (CI) are derived from epistemic SEs when the model was trained with \code{pi_method \%in\% c("epistemic", "both")}.
\item Prediction intervals (PI) are available only if the model was trained with \code{pi_method \%in\% c("aleatoric", "both")}.
\item For \code{which = "terms"} and factor covariates, interval bands are
represented as error bars around group means.
}}

\item{level}{Coverage level for intervals (e.g., \code{0.95}). Default \code{0.95}.}

\item{term}{Term name to plot (for \code{which = "terms"}).}

\item{rug}{Logical; if \code{TRUE} (default), add rugs to continuous term plots.}

\item{...}{Additional arguments passed to \code{predict.neuralGAM}.}
}
\value{
A single \code{ggplot} object.
}
\description{
Produce diagnostic and effect plots from a fitted \code{neuralGAM} model.
Supported plot types:
\itemize{
\item \code{which = "response"}: Fitted response values vs. observation index,
with optional confidence or prediction intervals.
\item \code{which = "link"}: Linear predictor (link scale) vs. observation index,
with optional confidence intervals.
\item \code{which = "terms"}: Per-term contributions (on the link scale),
displayed in a faceted plot:
\itemize{
\item For continuous covariates: line plot with optional ribbons
for confidence intervals (CI) and/or prediction intervals (PI).
\item For factor covariates: box plots of per-observation contributions
by level, with optional mean ± z·SE error bars if available.
}
}
}
\details{
Intervals:
\itemize{
\item \strong{Confidence intervals (CI):} Derived from epistemic SEs
(like in \code{mgcv}) if the model was trained with \code{pi_method = 'epistemic'}.
On the response scale they are propagated through the delta method.
\item \strong{Prediction intervals (PI):} Capture aleatoric uncertainty
if the model was trained with \code{pi_method = 'aleatoric'}. Constructed
by combining per-term bounds on the link scale and applying the
inverse link.
}

For factor terms, plots display the distribution of per-observation contributions
as box plots. If SEs are available, group means are shown with error bars
representing \eqn{\text{mean} \pm z \times SE}.

Multiple terms are always combined into a single faceted plot (one panel per term).
}
\examples{
\dontrun{
set.seed(1)
n <- 500
x1 <- runif(n, -2, 2)
x2 <- factor(sample(letters[1:3], n, TRUE))
x3 <- runif(n, -2, 2)

f1 <- sin(x1)
f2 <- ifelse(x2 == "a", 1, ifelse(x2 == "b", -1, 0))
f3 <- x3^2
y <- 2 + f1 + f2 + f3 + rnorm(n, sd = 0.3)
dat <- data.frame(x1, x2, x3, y)

library(neuralGAM)
ngam <- neuralGAM(y ~ s(x1) + x2 + s(x3),
                 data = dat, num_units = 128,
                 family = "gaussian",
                 pi_method = "both",
                 seed = 1)

# response with PI
autoplot(ngam, which = "response", interval = "prediction")

# link with CI
autoplot(ngam, which = "link", interval = "confidence")

# single term (continuous): x1
autoplot(ngam, which = "terms", term = "x1", interval = "both")

# single term (factor): x2
autoplot(ngam, which = "terms", term = "x2", interval = "confidence")

# user arranges multiple terms manually (pseudo-code)
p1 <- autoplot(ngam, which = "terms", term = "x1")
p2 <- autoplot(ngam, which = "terms", term = "x2")
# arrange p1, p2 using your preferred layout tooling, for example using: gridExtra::grid.arrange(grobs = list(p1,p2), ncol = 2)
}
}
