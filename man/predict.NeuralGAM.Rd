% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.NeuralGAM.R
\name{predict.neuralGAM}
\alias{predict.neuralGAM}
\title{Produces predictions from a fitted \code{neuralGAM} object}
\usage{
\method{predict}{neuralGAM}(
  object,
  newdata = NULL,
  type = c("link", "response", "terms"),
  terms = NULL,
  se.fit = FALSE,
  interval = c("none", "confidence", "prediction", "both"),
  level = 0.95,
  forward_passes = 30,
  diagnostic_bands = FALSE,
  verbose = 1,
  ...
)
}
\arguments{
\item{object}{A fitted \code{neuralGAM} object.}

\item{newdata}{Optional \code{data.frame}/list of covariates at which to predict.
If omitted, the training data cached in the object are used.}

\item{type}{One of \code{c("link","response","terms")}. Default \code{"link"}.}

\item{terms}{If \code{type = "terms"}, character vector of term names to include.
If \code{NULL}, all terms are returned. Intercept is not included (as in \pkg{mgcv}).}

\item{se.fit}{Logical; if \code{TRUE}, return SEs of the fitted mean (mgcv-style). Default \code{FALSE}.
For \code{type="terms"}, returns a matrix of per-term SEs (epistemic) when available.}

\item{interval}{One of \code{c("none","confidence","prediction","both")}. Default \code{"none"}.
Ignored when \code{type = "terms"} (prediction intervals are not defined for terms).}

\item{level}{Coverage level for intervals (e.g., \code{0.95}). Default \code{0.95}.}

\item{forward_passes}{Integer; number of MC-dropout forward passes when computing
epistemic uncertainty (used when \code{uncertainty_method \%in\% c("epistemic","both")}).}

\item{diagnostic_bands}{Logical (default FALSE). When \code{type="terms"}, return
per-term \emph{aleatoric residual quantile bands} (from quantile heads) for
diagnostic plotting. These are bands for partial residuals \eqn{R_j} and should
\emph{not} be interpreted as prediction intervals for \eqn{Y}.}

\item{verbose}{Integer (0/1). Default \code{1}.}

\item{\ldots}{Other options (passed on to internal predictors).}
}
\value{
\itemize{
\item If \code{interval == "none"}:
\itemize{
\item \code{se.fit = FALSE}: a numeric vector (link/response) or a numeric matrix (terms).
\item \code{se.fit = TRUE}: a list with \code{$fit} and \code{$se.fit} for link/response;
for \code{type="terms"}, \code{list(fit = terms_matrix, se.fit = se_terms_matrix)}.
}
\item If \code{interval != "none"}:
\itemize{
\item \code{type="link"}: a data frame with CI columns \code{lwr}, \code{upr}
(PIs are not provided on the link scale).
\item \code{type="response"}: a data frame with CI, PI, or both (when available).
\item \code{type="terms"}: same as \code{interval = "none"} (intervals not returned).
}
}
}
\description{
Generate predictions from a fitted \code{neuralGAM} model. Supported types:

\itemize{
\item \code{type = "link"} (default): linear predictor on the link scale.
\item \code{type = "response"}: predictions on the response scale.
\item \code{type = "terms"}: per-term contributions to the linear predictor (no intercept).
}

\strong{Standard errors and intervals}

\itemize{
\item If \code{se.fit = TRUE}, standard errors (SE) of the \emph{fitted mean} are returned
(epistemic only; mgcv-style via MC Dropout).
\item For \code{type = "response"}, SEs are mapped by the delta method:
\eqn{se_\mu = |d\mu/d\eta| \cdot se_\eta}.
\item Confidence intervals (CI) always reflect epistemic uncertainty about the fitted mean
(as in mgcv).
\item Prediction intervals (PI) are available only on the \emph{response scale}, and only if
the model was trained with \code{uncertainty_method \%in\% c("aleatoric", "both")}. On the per-term scale
quantile bands are available for diagnosis purposes only.
}

\strong{Important implementation details}

\itemize{
\item \emph{Epistemic SEs (CIs)} are obtained via Monte Carlo Dropout: multiple stochastic
forward passes provide an across-pass variance. For full-model CIs, uncertainty is
aggregated jointly by summing per-pass smooth contributions and taking the
across-pass variance (implicitly accounting for cross-term covariance). For
\code{type="terms"}, SEs are returned per smooth.
\item \emph{Prediction intervals (PIs)} reflect aleatoric uncertainty (and, for
\code{uncertainty_method="both"}, combined effects). PIs are provided \emph{only} on the
response scale.
\item For \code{type = "terms"}, only \emph{confidence intervals for the smooth effect}
are meaningful (from SEs). \strong{Prediction intervals are not defined for terms}
because partial effects are fitted functions, not noisy observations.
\item For \code{type = "link"}, only confidence intervals are provided;
prediction intervals are not defined on the link scale.
}
}
\examples{
\dontrun{
set.seed(42)
n <- 2000
x1 <- runif(n, -2.5, 2.5)
x2 <- runif(n, -2.5, 2.5)
x3 <- runif(n, -2.5, 2.5)
f1 <- x1^2; f2 <- 2 * x2; f3 <- sin(x3)
y  <- 2 + f1 + f2 + f3 + rnorm(n, 0.25)
train <- data.frame(x1, x2, x3, y)

library(neuralGAM)

# 1) Model without PIs
ngam0 <- neuralGAM(
  y ~ s(x1) + x2 + s(x3),
  data = train, family = "gaussian", num_units = 128
)
eta <- predict(ngam0, type = "link")
mu  <- predict(ngam0, type = "response")
trm <- predict(ngam0, type = "terms")
pr_link <- predict(ngam0, type = "link", se.fit = TRUE)
pr_resp <- predict(ngam0, type = "response", se.fit = TRUE)
pr_terms <- predict(ngam0, type = "terms", se.fit = TRUE)

newx <- data.frame(x1 = seq(-2.5, 2.5, length.out = 200), x2 = 0, x3 = 0)
mu_new <- predict(ngam0, newdata = newx, type = "response")

# 2) Model with PIs (aleatoric)
ngam_ale <- neuralGAM(
  y ~ s(x1) + x2 + s(x3),
  data = train, family = "gaussian", num_units = 128,
  uncertainty_method = "aleatoric", alpha = 0.05
)
ci_df  <- predict(ngam_ale, type = "response", interval = "confidence", level = 0.95)
pi_df  <- predict(ngam_ale, type = "response", interval = "prediction", level = 0.95)
both_df <- predict(ngam_ale, type = "response", interval = "both", level = 0.95)
trm_ci <- predict(ngam_ale, type = "terms", se.fit = TRUE)
trm_x1x2 <- predict(ngam_ale, type = "terms", terms = c("x1", "x2"))

newx2 <- data.frame(x1 = seq(-2.5, 2.5, length.out = 300), x2 = 0.5, x3 = 0)
both_new <- predict(ngam_ale, newdata = newx2, type = "response", interval = "both", level = 0.95)

# 3) Model with PIs (both: aleatoric + epistemic)
ngam_both <- neuralGAM(
  y ~ s(x1) + x2 + s(x3),
  data = train, family = "gaussian", num_units = 128,
  uncertainty_method = "both", alpha = 0.05, forward_passes = 50)
res_both   <- predict(ngam_both, type = "response", interval = "both")
link_ci    <- predict(ngam_both, type = "link", interval = "confidence")
}
}
\author{
Ines Ortega-Fernandez, Marta Sestelo
}
