% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.NeuralGAM.R
\name{predict.neuralGAM}
\alias{predict.neuralGAM}
\title{Predictions from a fitted \code{neuralGAM} object}
\usage{
\method{predict}{neuralGAM}(object, newdata = NULL, type = "link", terms = NULL, verbose = 1, ...)
}
\arguments{
\item{object}{A fitted \code{neuralGAM} object.}

\item{newdata}{A data frame or list containing covariate values at which predictions
are required. If not provided, predictions are returned for the training data.}

\item{type}{Type of prediction:
\describe{
\item{"link"}{Returns the linear predictor (default).}
\item{"terms"}{Returns each model component contribution as separate columns in a \code{data.frame}.}
\item{"response"}{Returns predictions on the response scale.
If the model was trained with \code{BUILD_PI = TRUE}, this will return a \code{data.frame} with columns:
\itemize{
\item \code{y_L}: Lower bound of prediction interval.
\item \code{y_U}: Upper bound of prediction interval.
\item \code{y_hat}: Mean prediction (point estimate).
}
Otherwise, a numeric vector of point predictions is returned.
}
}}

\item{terms}{If \code{type = "terms"}, a character vector of term names to return.
If \code{NULL} (default), all terms are returned.}

\item{verbose}{Verbosity mode (0 = silent, 1 = print messages). Defaults to 1.}

\item{...}{Additional arguments passed to underlying prediction methods.}
}
\value{
\itemize{
\item For \code{type = "link"}: numeric vector of linear predictor values.
\item For \code{type = "terms"}: \code{data.frame} of term contributions.
\item For \code{type = "response"}:
\describe{
\item{If \code{BUILD_PI = FALSE}}{Numeric vector of predicted response values.}
\item{If \code{BUILD_PI = TRUE}}{\code{data.frame} with columns \code{y_L}, \code{y_U}, \code{y_hat}.}
}
}
}
\description{
Generates predictions from a fitted \code{neuralGAM} model for new or training data.
Supports both standard point predictions and prediction intervals if the model was trained
with \code{BUILD_PI = TRUE}.
}
\details{
When prediction intervals are available (\code{BUILD_PI = TRUE}), the lower and upper bounds
are returned along with the mean prediction. For plotting, these can be passed to
\code{autoplot.neuralGAM()}, which will automatically add ribbons for intervals.
}
\examples{
\dontrun{

n <- 24500

seed <- 42
set.seed(seed)

x1 <- runif(n, -2.5, 2.5)
x2 <- runif(n, -2.5, 2.5)
x3 <- runif(n, -2.5, 2.5)

f1 <-x1**2
f2 <- 2*x2
f3 <- sin(x3)
f1 <- f1 - mean(f1)
f2 <- f2 - mean(f2)
f3 <- f3 - mean(f3)

eta0 <- 2 + f1 + f2 + f3
epsilon <- rnorm(n, 0.25)
y <- eta0 + epsilon
train <- data.frame(x1, x2, x3, y)

library(neuralGAM)
ngam <- neuralGAM(y ~ s(x1) + x2 + s(x3), data = train,
                 num_units = 1024, family = "gaussian",
                 activation = "relu",
                 learning_rate = 0.001, bf_threshold = 0.001,
                 max_iter_backfitting = 10, max_iter_ls = 10,
                 seed = seed
                 )
n <- 5000
x1 <- runif(n, -2.5, 2.5)
x2 <- runif(n, -2.5, 2.5)
x3 <- runif(n, -2.5, 2.5)
test <- data.frame(x1, x2, x3)

# Obtain linear predictor
eta <- predict(ngam, test, type = "link")

# Obtain predicted response
yhat <- predict(ngam, test, type = "response")

# Obtain each component of the linear predictor
terms <- predict(ngam, test, type = "terms")

# Obtain only certain terms:
terms <- predict(ngam, test, type = "terms", terms = c("x1", "x2"))
}
}
